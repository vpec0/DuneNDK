#include "services_dune.fcl"
#include "photpropservices_dune.fcl"
#include "detsimmodules_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "caldata_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
##include "pandoramodules.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_dune10kt.fcl"
#include "particleid.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "trackshowerhits.fcl"
#include "showerfindermodules_dune.fcl"
#include "emshower3d.fcl"

process_name: HitReco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "hitreco_hist.root" }
  MemoryTracker:     {}
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefd_reco_services
  @table::dunefd_simulation_services
}
#source is now a root file
source:
{
  module_type: RootInput
#  maxEvents:  10        # Number of events to create
  saveMemoryObjectThreshold: 0
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{

 producers:
 {
   daq:       @local::dunefd_simwire
#   simcounter:     @local::dunefd_simcounter
   opdigi:         @local::dunefd_opdigi
   ophit:              @local::dune35t_ophit 
   opflash:            @local::dune35t_opflash 

   caldata:            @local::dunefd_calwire

# random number saver
  rns:                 { module_type: RandomNumberSaver }
# convert raw::RawDigit to recob::wire
  caldata:            @local::producer_adcprep
# actual hit finder
  gaushit:            @local::dunefd_gaushitfinder
#  fasthit:            @local::dunefd_fasthitfinder
#  cchit:              @local::dunefd_clustercrawlerhit
# disambiguation cheater that removes duplicate hits
#  dcheat:             @local::dunefd_disambigcheat
#  fasthitdc:          @local::dunefd_disambigcheat
#  dcheatcc:           @local::dune35t_disambigcheat

# actual disambiguation
  hitfd:             @local::dunefd_hitfinderfd

 }

 filters:
 {
        fiducial: { module_type: "TruthFiducialFilter" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [  
        #fiducial filter
        fiducial,
        #daq
        daq, opdigi, 
         #optical hits and flashes
         ophit, opflash,
         #TPC wire signals      
         caldata,
         #hit reco 
         gaushit, 
         #disambiguation
         hitfd 
         ]

 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   dataTier:    "hit-reconstructed"
   compressionLevel: 1
   saveMemoryObjectThreshold: 0 
   SelectEvents: [ reco ]
   }
}

#Optical detector configuration
physics.producers.ophit.InputModule:                    "opdigi"
physics.producers.opflash.InputModule:                  "ophit"

