////////////////////////////////////////////////////////////////////////
// Class:       MuLengthFilter
// Module Type: filter
// File:        MuLengthFilter_module.cc
//
// Generated at Thu Nov 26 11:48:14 2015 by Matt Robinson using artmod
// from cetpkgsupport v1_10_01.
////////////////////////////////////////////////////////////////////////

#include "art/Framework/Core/EDFilter.h"
#include "art/Framework/Core/ModuleMacros.h"
#include "art/Framework/Principal/Event.h"
#include "art/Framework/Principal/Handle.h"
#include "art/Framework/Principal/Run.h"
#include "art/Framework/Principal/SubRun.h"
#include "art/Utilities/InputTag.h"
#include "fhiclcpp/ParameterSet.h"
#include "messagefacility/MessageLogger/MessageLogger.h"

#include <memory>

#include "larsim/Simulation/SimChannel.h"
#include "larcore/Geometry/Geometry.h"
#include "SimulationBase/MCTruth.h"

#include <iostream>
#include <algorithm>

struct IDEYLess
{
  bool operator()(const sim::IDE& first, const sim::IDE& second)
  {
    return first.y < second.y;
  }
};

namespace dune {
  class MuLengthFilter;
}

class dune::MuLengthFilter : public art::EDFilter {
public:
  explicit MuLengthFilter(fhicl::ParameterSet const & p);
  // The destructor generated by the compiler is fine for classes
  // without bare pointers or other resource use.

  // Plugins should not be copied or assigned.
  MuLengthFilter(MuLengthFilter const &) = delete;
  MuLengthFilter(MuLengthFilter &&) = delete;
  MuLengthFilter & operator = (MuLengthFilter const &) = delete;
  MuLengthFilter & operator = (MuLengthFilter &&) = delete;

  // Required functions.
  bool filter(art::Event & e) override;


private:

  // Declare member data here.
  art::ServiceHandle<geo::Geometry> geom_;
  double length_;

};


dune::MuLengthFilter::MuLengthFilter(fhicl::ParameterSet const & p):
  EDFilter(),
  length_(p.get<double>("length", 100.))
// Initialize member data here.
{
  // Call appropriate produces<>() functions here.
}

bool dune::MuLengthFilter::filter(art::Event & event)
{
  // Implementation of required member function here.
  art::Handle<std::vector<sim::SimChannel> > simchannels;
  event.getByLabel("largeant", simchannels);
  
  std::vector<sim::IDE> ides;
  std::vector<sim::IDE> priides;
  for (auto const& simchannel:*simchannels)
    {
      if (geom_->SignalType(simchannel.Channel()) == geo::kCollection)
	{
	  for (auto const& tdcide:simchannel.TDCIDEMap())
	    {
	      //unsigned int tdc=tdcide.first;
	      auto const& idevec=tdcide.second;
	      for (auto const& ide:idevec)
		{
		  if (ide.trackID==1)
		    priides.push_back(ide);
		  ides.push_back(ide);
		}
	    }
	}
    }
  if (priides.size())
    {
      std::sort(priides.begin(), priides.end(), IDEYLess());
      double dx=priides.front().x-priides.back().x;
      double dy=priides.front().y-priides.back().y;
      double dz=priides.front().z-priides.back().z;
      double range=sqrt(dx*dx+dy*dy+dz*dz);
      return range<length_;
    }
  return ides.size()>0;
}

DEFINE_ART_MODULE(dune::MuLengthFilter)
